using System;
using System.IO;

namespace BraveNewWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            int playerPositionX;
            int playerPositionY;
            int playerDirectionX = 0;
            int playerDirectionY = 0;

            char finishLine = '-';
            char wallSymbol = '#';

            bool isPlaying = true;

            char[,] map = ReadMap("map", out playerPositionX, out playerPositionY);

            DrawMap(map);

            while (isPlaying)
            {
                if (Console.KeyAvailable)
                {

                    ChangeDirection(ref playerDirectionX, ref playerDirectionY);

                    if (map[playerPositionX + playerDirectionX, playerPositionY + playerDirectionY] != wallSymbol)
                    {
                        MoveCharacter(ref playerPositionX, ref playerPositionY, playerDirectionX, playerDirectionY);

                        if (map[playerPositionX, playerPositionY] == finishLine)
                        {
                            Console.SetCursorPosition(0, 20);
                            Console.WriteLine($"Вы прошли игру 'Лабиринт'!");
                            isPlaying = false;
                        }
                    }
                }
            }
        }

        static void ChangeDirection(ref int playerDirectionX, ref int playerDirectionY)
        {
            const ConsoleKey MoveUpCommand = ConsoleKey.W;
            const ConsoleKey MoveDownCommand = ConsoleKey.S;
            const ConsoleKey MoveLeftCommand = ConsoleKey.A;
            const ConsoleKey MoveRightCommand = ConsoleKey.D;

            ConsoleKeyInfo keyInput = Console.ReadKey(true);

            switch (keyInput.Key)
            {
                case MoveLeftCommand:
                    playerDirectionX = 0;
                    playerDirectionY = -1;
                    break;

                case MoveUpCommand:
                    playerDirectionX = -1;
                    playerDirectionY = 0;
                    break;

                case MoveRightCommand:
                    playerDirectionX = 0;
                    playerDirectionY = 1;
                    break;

                case MoveDownCommand:
                    playerDirectionX = 1;
                    playerDirectionY = 0;
                    break;
            }
        }

        static void MoveCharacter(ref int playerPositionX, ref int playerPositionY, int playerDirectionX, int playerDirectionY)
        {
            char player = '+';
            char emptyCell = ' ';

            Console.SetCursorPosition(playerPositionY, playerPositionX);
            Console.Write(emptyCell);

            playerPositionX += playerDirectionX;
            playerPositionY += playerDirectionY;

            Console.SetCursorPosition(playerPositionY, playerPositionX);
            Console.Write(player);
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static char[,] ReadMap(string mapName, out int playerDirectionX, out int playerDirectionY)
        {
            char player = '+';

            playerDirectionX = 0;
            playerDirectionY = 0;

            string[] newFile = File.ReadAllLines($"maps/{mapName}.txt");
            char[,] map = new char[newFile.Length, newFile[0].Length];

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    map[i, j] = newFile[i][j];

                    if (map[i, j] == player)
                    {
                        playerDirectionX = i;
                        playerDirectionY = j;
                    }
                }
            }

            return map;
        }
    }
}
